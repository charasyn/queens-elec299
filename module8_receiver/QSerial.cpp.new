/*
  QSerial.cpp - 300 baud IR serial library
  Adapted from SoftwareSerial by Stan Simmons. 
  Variables that are internal to the library have
  names that start with an underscore (a legal character)
  to make them stand out to the user.
*/

/*
*****************************************************************************
* Includes
*****************************************************************************
*/

#include "Arduino.h"
#include "QSerial.h"

/*
*****************************************************************************
* Constructor
*****************************************************************************
*/

QSerial::QSerial()
{
    _receivePin = -1; //not attached yet
    _transmitPin = -1; //not attached yet
}

/*
*****************************************************************************
* User API
*****************************************************************************
*/

void QSerial::attach(int receivePin, int transmitPin)
{
    _receivePin = receivePin;
    _transmitPin = transmitPin;
    _baudRate = 300;
    _bitPeriod = 1000000 / _baudRate; // in microseconds
    _lineNoisy = false;
    if (_transmitPin >= 0)
        digitalWrite(_transmitPin, LOW); // will hold IR transitter's 555 in reset state (IDLE)
}

void QSerial::detach()
{
    _receivePin = -1; //not attached
    _transmitPin = -1; //not atatched
}

static const int _line_carrierPeriod = 1000000 / 40000; // in microseconds
static const int _line_timeout = 255;

// considering the expected number of carriers per bit is 133 (40000 Hz / 300 Hz),
// I think this is a good place to start
static const int _line_carrierPresentThresh = 120;
static const int _line_carrierNoisyThresh   = 65;
static const int _line_carrierAbsentThresh  = 5;

static byte _line_waitForValue(bool value) {
    // returns 0 for success, usecs waited for timeout
    byte totwait_usecs = 0;
    while (digitalRead(_receivePin) != value && totwait_usecs < _line_carrierPeriod) {
        totwait_usecs += 1;
        delayMicroseconds(1);
    }
    return (digitalRead(_receivePin) == value) ? 0 : totwait_usecs;
}

static bool _line_waitForValueLong(bool value, int timeout_msecs) {
    // returns false for no timeout, true for timeout
    int totwait_usecs = 0;
    while (totwait_usecs < 1000 * timeout_msecs) {
        byte justWaited = _line_waitForValue(value);
        if (justWaited == 0)
            return false;
        totwait_usecs += justWaited;
    }
    return true;
}

static bool _line_readBit(void) {
    int pulseCount = 0;
    int totwait_usecs = 0;

    while (totwait_usecs < _bitPeriod) {
        // wait for line to go low
        byte justWaited = _line_waitForValue(0);
        if (justWaited != 0) {
            totwait_usecs += justWaited;
            continue;
        }

        // wait for line to go high
        justWaited = _line_waitForValue(1);
        if (justWaited != 0) {
            totwait_usecs += justWaited;
            continue;
        }

        // we've detected a carrier clock pulse
        pulseCount++;
        totwait_usecs += _line_carrierPeriod;
        delayMicroseconds(_line_carrierPeriod / 2);
    }

    // the presence of a carrier signal indicates that
    //   the line is logic low.
    if (pulseCount < _line_carrierAbsentThresh)
        return true;
    if (pulseCount > _line_carrierPresentThresh)
        return false;
    _lineNoisy = true;
    return pulseCount < _line_carrierNoisyThresh;
}

static bool _line_waitForDataStart(int timeout_msecs)
{
    // returns false for no timeout, true for timeout

    // wait for first IR pulse of start bit
    if (_line_waitForValueLong(false, timeout_msecs)) return true;
    return false;
}

int QSerial::receive(int timeout_msecs)
{
    //returns -1 if no byte, or if not attached
    //returns received byte value unless an error (then returns -2 or -3)
    int val = 0;
    int offset;
    int bitDelay = _bitPeriod - clockCyclesToMicroseconds(50); // each loop is about 50 cycles
    // one byte of serial data (LSB first)
    // ...--\    /--\/--\/--\/--\/--\/--\/--\/--\/--...
    //	 \--/\--/\--/\--/\--/\--/\--/\--/\--/
    //	start  0   1   2   3   4   5   6   7 stop

    if (_receivePin == -1) //not attached?
        return -1;

    // wait for the data transfer to begin
    if (!_line_waitForDataStart(timeout_msecs))
        return -1; //nothing received, so return -1
    //ELSE keep going to verify start bit and receive rest of bits

    //FIRST, confirm that this is a real start bit
    // byte start indicated by a falling edge and low start bit
    if (_line_readBit()) // if the bit is high
        return -2; //must have been a false start, so return -2 value

    // offset of the bit in the byte: from 0 (LSB) to 7 (MSB)
    for (offset = 0; offset < 8; offset++) {
        // read bit and "OR" it into the result at the proper bit offset
        val = val | _line_readBit() << offset;
    }
    if (!_line_readBit()) //missing expected HIGH for stop bit?
        return -3; //framing error, so return -3 value
    else
        return val; //return byte value
}

void QSerial::transmit(byte b)
{
    //uses inverted levels so it can directly drive a 555's active-low reset pin
    int bitDelay;
    byte mask;

    if (_transmitPin == -1) //not attached?
        return; //do nothing

    digitalWrite(_transmitPin, HIGH); //turn ON 555 for start bit transmission (receiver will go LOW)
    delayMicroseconds(_bitPeriod);

    bitDelay = _bitPeriod - clockCyclesToMicroseconds(50); // each loop is about 50 cycles

    for (mask = 0x01; mask; mask <<= 1) {
        if (b & mask) // get the next bit
            digitalWrite(_transmitPin, LOW); // a bit '1' is transmitted as absence of IR (555 is reset)
        else
            digitalWrite(_transmitPin, HIGH); //  a bit '0' is transmitted as presence of IR (555 is enabled)
        delayMicroseconds(bitDelay);
    }

    digitalWrite(_transmitPin, LOW); //tack on the "STOP" bit (receiver will go HIGH)
    delayMicroseconds(_bitPeriod);
}
